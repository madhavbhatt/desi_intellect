import sqlite3
import nmap
import os
import datetime
import requests
from bs4.dammit import EncodingDetector
from bs4 import BeautifulSoup
import re

services = {}
exploits = []
OUTPUT_PATH = os.getcwd() + "/exploitscanner/templates/results"


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def stick_the_dogs():
    nm = nmap.PortScanner()
    database = sqlite3.connect('db.sqlite3')
    connector = database.cursor()
    connector.execute('SELECT * FROM exploitscanner_target WHERE status="Pending"')
    rows = connector.fetchall()

    for row in rows:
        id_num = row[0]
        uuid_num = row[1]
        ipaddr = row[2]

        filename = "%s/%s" % (OUTPUT_PATH, uuid_num)
        nm.scan(hosts=ipaddr, arguments='-T4 -A -O')

        # connector.execute('UPDATE exploitscanner_target SET status = ? WHERE id = ? ', ("Running", id_num))
        # database.commit()
        os.system("xsltproc %s.xml -o %s.html" % (filename, filename))
        connector.execute('UPDATE exploitscanner_target SET status = ? WHERE id = ? ', ("Complete", id_num))
        connector.execute('UPDATE exploitscanner_target SET completion_date = ? WHERE id = ? ',(datetime.datetime.now(), id_num))
        database.commit()

        for ip in nm.analyse_nmap_xml_scan()['scan'].viewkeys():
            services[ip] = {}
            for tcpport in nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'].viewkeys():
                service = (nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'][tcpport]['product'])
                version = (nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'][tcpport]['version'])
                if service != '':
                    services[ip][service] = version

        for ipv4 in services:
            for product, version in services[ipv4].iteritems():
                response = requests.get("https://www.google.com/search?q=%s+%s+exploitdb" % (product.replace(" ","+"), version))
                http_encoding = response.encoding if 'charset' in response.headers.get('content-type','').lower() else None
                html_encoding = EncodingDetector.find_declared_encoding(response.content, is_html=True)
                encoding = html_encoding or http_encoding
                soup = BeautifulSoup(response.content, "lxml", from_encoding=encoding)

                for link in soup.find_all('a', href=True):
                    if "q=https://www.exploit-db.com/exploits/" in link['href']:
                        url = re.search('https://www\.exploit-db\.com/exploits/[0-9]*', link['href']).group(0)
                        if url not in exploits:
                            exploits.append(url)

        print (exploits)


def rescan(identifier):
    database = sqlite3.connect('db.sqlite3')
    connector = database.cursor()
    connector.execute('UPDATE exploitscanner_target SET status = ? WHERE id = ? ', ("Pending", identifier))
    database.commit()
    stick_the_dogs()


def remove(identifier):
    database = sqlite3.connect('db.sqlite3')
    connector = database.cursor()
    connector.execute('DELETE FROM exploitscanner_target WHERE id = ? ', identifier)
    database.commit()




'''
{'nmap': 
        {'scanstats': 
            {'uphosts': '1', 'timestr': 'Mon Jan 15 13:36:59 2018', 'downhosts': '0', 'totalhosts': '1', 'elapsed': '0.29'}, 
        'scaninfo': 
            {'tcp': {'services': '8000', 'method': 'syn'}}, 
        'command_line': 'nmap -oX - -p8000 127.0.0.1'}, 
    'scan': 
            {'127.0.0.1': 
                    {'status': 
                        {'state': 'up', 'reason': 'localhost-response'}, 
                        'hostnames': [{'type': 'PTR', 'name': 'localhost'}], 
                        'vendor': {}, 
                        'addresses': {'ipv4': '127.0.0.1'}, 
                        'tcp': 
                            {8000: 
                                {'product': '', 'state': 'open', 'version': '', 'name': 'http-alt', 'conf': '3', 'extrainfo': '', 'reason': 'syn-ack', 'cpe': ''}
                            }
                    }
            }
    } 

for i in range(3):
    list[i] = {}
    for j in range(1,3):
        list[i][j] = i*i

exploits = {}

for ip in nm.analyse_nmap_xml_scan()['scan'].viewkeys():
    exploits[ip] = {}
    for tcpport in nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'].viewkeys():
        service = (nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'][tcpport]['product'])
        version = (nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'][tcpport]['version'])
        exploits[ip][service]= version
        
print nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'][tcpport]['product']
print nm.analyse_nmap_xml_scan()['scan'][ip]['tcp'][tcpport]['version']

    
print nm.analyse_nmap_xml_scan()['scan']['127.0.0.1']['tcp'][8000]['product']
print nm.analyse_nmap_xml_scan()['scan']['127.0.0.1']['tcp'][8000]['version']


exploits = []
response = requests.get("https://www.google.com/search?q=pulse+audio+setuid+exploitdb")
http_encoding = response.encoding if 'charset' in response.headers.get('content-type', '').lower() else None
html_encoding = EncodingDetector.find_declared_encoding(response.content, is_html=True)
encoding = html_encoding or http_encoding
soup = BeautifulSoup(response.content, from_encoding=encoding)


for link in soup.find_all('a',href=True):
     if "q=https://www.exploit-db.com/exploits/" in link['href']:
             url = re.search('https://www\.exploit-db\.com/exploits/[0-9]*',link['href']).group(0)
             if url not in exploits:
                     print url
                     exploits.append(url)
'''
