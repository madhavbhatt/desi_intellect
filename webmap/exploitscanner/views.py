from django.shortcuts import redirect
from django.shortcuts import render, get_object_or_404
from django.utils import timezone
from .forms import ScanTarget
from .models import Target
from . import bloodtrail


def target_list(request):
    targets = Target.objects.filter(created_date__lte=timezone.now()).order_by('created_date')
    return render(request, 'exploit/target_list.html', {'targets': targets})


def target_detail(request, pk):
    target = get_object_or_404(Target, pk=pk)
    return render(request, 'exploit/target_detail.html', {'target': target})


def target_new(request):
    if request.method == "POST":
        form = ScanTarget(request.POST)
        if form.is_valid():
            target = form.save(commit=False)
            target.author = request.user
            target.created_date = timezone.now()
            target.save()
            bloodtrail.stick_the_dogs()
            return redirect('target_detail', pk=target.pk)
    else:
        form = ScanTarget()
    return render(request, 'exploit/target_edit.html', {'form': form})


def target_edit(request, pk):
    target = get_object_or_404(Target, pk=pk)
    if request.method == "POST":
        form = ScanTarget(request.POST, instance=target)
        if form.is_valid():
            target = form.save(commit=False)
            target.author = request.user
            target.created_date = timezone.now()
            target.save()
            return redirect('target_detail', pk=target.pk)
    else:
        form = ScanTarget(instance=target)
    return render(request, 'exploit/target_edit.html', {'form': form})


def target_rescan(request, pk):
    target = get_object_or_404(Target, pk=pk)
    bloodtrail.rescan(pk)
    targets = Target.objects.filter(created_date__lte=timezone.now()).order_by('created_date')
    return render(request, 'exploit/target_list.html', {'targets': targets})


def target_exploit(request, pk):
    target = get_object_or_404(Target, pk=pk)
    bloodtrail.unleash_the_hound(pk)
    targets_exploit = Target.objects.filter(created_date__lte=timezone.now()).order_by('created_date')
    return render(request, 'exploit/target_list.html', {'targets': targets_exploit})


def target_remove(request, pk):
    target = get_object_or_404(Target, pk=pk)
    bloodtrail.remove(pk)
    targets_remove = Target.objects.filter(created_date__lte=timezone.now()).order_by('created_date')
    return render(request, 'exploit/target_list.html', {'targets': targets_remove})


def target_result(request, pk):
    target = get_object_or_404(Target, pk=pk)
    return render(request, 'results/%s.html' % target.keyid, {'target': target})


def target_download(request, pk):
    target = get_object_or_404(Target, pk=pk)
    return render(request, 'results/%s.html' % target.keyid, {'target': target})

